#!/usr/bin/env python

# Copyright (c) 2014 Caitlin Potter and Contributors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#  * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os,sys

#Project name
name = "TimedText"

#Project Description
description = ("TimedText - Library for Processing and Manipulating "
            +  "Timed Text and Captions on the Web")

copyrightHolders="Caitlin Potter and Contributors"

license = "BSD-2-CLAUSE"
linewrap = 70

#Paths that should not be recursed into or used.
ignore = os.path.join('src','expat').split()

#Allowed extensions
extensions = '.cpp .h .sh'.split()

#Allowed basenames
basenames = 'wscript configure LICENSE'.split()

#Start path
start = os.getcwd()

#Path containing this script
scripts = os.path.dirname(os.path.realpath(__file__))

#Path which should contain the source tree
root = os.path.abspath(os.path.join(scripts,os.path.pardir))

def applyLicense(paths,dry,remove):
	os.chdir(root)
	args=[]
	if dry: args.append('-n')
	args.append('-g')
	args.extend(['--copyright-software', '%s'%name])
	args.extend(['--copyright-software-description', '%s'%description])
	args.extend(['--copyright-holder', '%s'%copyrightHolders])
	from datetime import date
	args.extend(['--copyright-year', '%s'%str(date.today().year+1)])
	args.extend(['--output-dir', '%s'%root])
	args.extend(['--word-wrap', '%s'%str(linewrap)])
	args.extend(['--license', '%s'%license])
	args.append("--add-path" if not remove else "--remove-path")

	from subprocess import call
	for p in paths:
		tmp=['copyright-header']
		tmp.extend(args)
		tmp.append(p)
		call(tmp)
	os.chdir(start)

def findPaths():
	def sub(start,path):
		paths=[]
		for ent in os.listdir(path):
			if ent.startswith('.'):
				continue
			full=os.path.join(path,ent)
			nice=full.replace(start,'')
			if nice in ignore:
				pass
			elif os.path.isfile(full):
				if os.path.basename(full) in basenames:
					paths.append(nice)
				else:
					for ext in extensions:
						if nice.endswith(ext):
							paths.append(nice)
							break
			elif os.path.isdir(full):
				paths.extend(sub(start,full))
		return paths

	os.chdir(root)
	base=root
	paths=sub(base+os.sep,base)
	os.chdir(start)
	return paths

def main(args):
	dry=False
	remove=False
	paths=[]
	def help():
		print "%s <files> [-n/--dry, -u/--unlicense, -h/--help]" % sys.argv[0]
		print "A list of files/directories may be provided -- These are assumed"
		print "to be relative to the root source directory. Absolute paths are"
		print "also accepted.\n"
		print "If files are provided, only these files shall be operated on."
		print "In other cases, each of the files with known filenames/extensions"
		print "are modified. These include C++ sources and header files, shell and"
		print "python scripts, and the LICENSE file in the root of the tree.\n"
		sys.exit(1)

	for a in args:
		if a in ['-n','--dry']:
			dry=True
		elif a in ['-h', '--help']:
			help()
		elif a in ['-u', '--unlicense']:
			remove=True
		elif os.path.isdir(a) or os.path.isfile(a):
			paths.append(a)

	if len(paths) is 0:
		paths=findPaths()

	if len(paths) > 0:
		applyLicense(paths,dry,remove)

if __name__ == "__main__":
	args=sys.argv[1:]
	main(args)
