#!/bin/env python

# Copyright (c) 2013 Caitlin Potter and Contributors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#  * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys,os,re
from waflib import Logs
SUBDIRS=['Text', 'List', 'Node', 'Buffer', 'Sniffer', 'WebVTTParser', 'Cue']

def options(ctx):
	ctx.add_option('--compact',dest='compact',
		           help='Show compacted test output',
		           action='store_true', default=False)
	ctx.add_option('--with-valgrind',dest='valgrind',
		           help='Run tests with valgrind checks',
		           action='store_true', default=False)
	ctx.add_option('--valgrind-options',dest='valgrind_opts',
		           help='Valgrind options for test-runner',
		           action='store', default='--tool=memcheck --track-origins=yes --leak-check=full --error-exitcode=1')
	ctx.add_option('--with-drmemory',dest='drmemory',
		           help='Run tests with DrMemory checks (Currently only supports -m32 builds)',
		           action='store_true', default=False)
	ctx.add_option('--drmemory-options',dest='drmemory_opts',
		            help='DrMemory options for test-runner',
		            action='store', default='-show_reachable -show_threads -batch')
	ctx.add_option('--with-lcov',dest='lcov',
		           help='Generate test coverage report using lcov (requires -ftest-coverage and -fprofile-arcs)',
		           action='store_true', default=False)
	ctx.add_option('--lcov-html', dest='lcov_html', help='Directory to store lcov HTML reports',
		           action='store', default=False)
def configure(ctx):
	pass

def build(ctx):
	lib=[]
	root=''
	#ctx.options.all_tests = True
	features=['cxx','cxxprogram']
	cxxflags=ctx.env.CXXFLAGS
	if ctx.options.testcmd is False:
		if ctx.options.valgrind:
			ctx.options.testcmd = ("valgrind %s --"%ctx.options.valgrind_opts) + " %s"
		elif ctx.options.drmemory:
			ctx.options.testcmd = ("drmemory %s --"%ctx.options.drmemory_opts) + " %s"

	after_tests=None
	if ctx.cmd in ['check']:
		features.append('test')
		if ctx.options.lcov:
			from subprocess import call
			bld=ctx.bldnode.abspath()
			baseinfo=os.path.join(bld,'base.info')
			testinfo=os.path.join(bld,'test.info')
			totalinfo=os.path.join(bld,'total.info')
			call(['lcov','-b',bld,'-d',bld,'-c', '-i', '-o', baseinfo])
			def lcov_genhtml(ctx):
				# Create test coverage data file
				call(['lcov','-b',bld,'-d',bld,'-c', '-o', testinfo])
				# Combine base and test coverage
				call(['lcov','-a',baseinfo,'-a',testinfo,'-o',totalinfo])
				if not ctx.options.lcov_html:
					ctx.options.lcov_html=os.path.join(bld,'testcoverage')
				call(['genhtml','-o',ctx.options.lcov_html,'-t',
				      'TimedText Test Coverage', '-k', '-s', '--highlight', 
				      '--legend', '--demangle-cpp',totalinfo])
			after_tests=lcov_genhtml
	if ctx.env.DEST_OS in ['linux']:
		lib.append('pthread')
	ctx.stlib(name='gtest',
		      target='../gtest',
		      source='gtest-all.cc',
		      includes='.',
		      export_includes='.')

	for subdir in SUBDIRS:
		name='%sTests'%subdir
		src=ctx.sources(path=os.path.join(ctx.path.abspath(),subdir))
		src.append('gtest_main.cc')
		ctx.program(name=name, target='../%s'%name, source=src,
			        use=['gtest','timedtext'], lib=lib,
			        includes='../src', features=features,
			        defines=['private=public','protected=public'])

	val = re.compile('=+\d+=+ (?P<details>.*)')
	drm = re.compile('~~Dr\.M~~ (?P<details>.*)')
	def proc_valgrind_err(err):
		for l in err.splitlines(False):
			m = re.match(val, l)
			s = l
			if m:
				md = m.groupdict()
				s = md['details']
			Logs.pprint('CYAN', s)

	def proc_drmem_err(err):
		for l in err.splitlines(False):
			m = re.match(drm, l)
			s = l
			if m:
				md = m.groupdict()
				s = md['details']
			if not s.startswith('Details:'):
				Logs.pprint('CYAN', s)

	def proc_default_err(err):
		for l in err.splitlines(False):
			Logs.pprint('CYAN',l)
	proc_err = None
	if ctx.options.valgrind:
		proc_err = proc_valgrind_err
	elif ctx.options.drmemory:
		proc_err = proc_drmem_err
	if not proc_err:
		proc_err = proc_default_err

	ptn = re.compile('(?P<prefix>\[\s*(?P<type>\w+|=+|-+)\s*\])(?P<info>\s+.*)')
	
	def colourify(ctx):
		lst = getattr(ctx, 'utest_results', [])
		_cols = {
			'==========' : 'GREEN',
			'----------': 'GREEN',
			'RUN' : 'GREEN',
			'OK' : 'GREEN',
			'PASSED' : 'GREEN',
			'FAILED' : 'RED'
		}
		if lst:
			show = True if ctx.options.compact is False else False
			passed=0
			failed=0
			if not show: Logs.pprint('GREEN',"\n[==========] ", label="Running %d tests" % len(lst))
			for (f, code, out, err) in lst:
				col=''
				if code==0:
					st = '[  PASSED  ] '
					col='GREEN'
					passed+=1
				else:
					st='[  FAILED  ] '
					col='RED'
					failed+=1
				if show:
					Logs.pprint( 'CYAN' , '\nRunning tests from: %s' % f )
					for l in out.splitlines(False):
						m = re.match(ptn, l)
						if m:
							md = m.groupdict()
							Logs.pprint(_cols.get( md['type'], 'NORMAL'),
										md['prefix'], label=md['info'])
						elif not l.startswith('Running'):
							Logs.pprint('NORMAL', l)
					proc_err(err)
				else:
					Logs.pprint(col,st, label=os.path.basename(f))
			if failed==0: Logs.pprint('GREEN',"[==========] ", label="Passed all tests")
			else: Logs.pprint('GREEN',"[==========] ", label="Passed %d/%d tests" %(passed, passed+failed))
			st=0 if failed==0 else 1
			if after_tests:
				after_tests(ctx)
			sys.exit(st)
	ctx.add_post_fun(colourify)
